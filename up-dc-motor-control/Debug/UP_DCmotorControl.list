
UP_DCmotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08002140  08002140  00012140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800214c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  20000014  08002160  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000054  08002160  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005dbd  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f15  00000000  00000000  00025dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000770  00000000  00000000  00026d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d8  00000000  00000000  00027480  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002664  00000000  00000000  00027b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002565  00000000  00000000  0002a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002c721  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000020c0  00000000  00000000  0002c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08002128 	.word	0x08002128

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08002128 	.word	0x08002128

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	78db      	ldrb	r3, [r3, #3]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	461a      	mov	r2, r3
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4313      	orrs	r3, r2
 8000966:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d044      	beq.n	80009fc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	e038      	b.n	80009f0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800097e:	2201      	movs	r2, #1
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d126      	bne.n	80009ea <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80009a2:	220f      	movs	r2, #15
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	4013      	ands	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	78db      	ldrb	r3, [r3, #3]
 80009c8:	2b28      	cmp	r3, #40	; 0x28
 80009ca:	d105      	bne.n	80009d8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80009cc:	2201      	movs	r2, #1
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	409a      	lsls	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	e008      	b.n	80009ea <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	78db      	ldrb	r3, [r3, #3]
 80009dc:	2b48      	cmp	r3, #72	; 0x48
 80009de:	d104      	bne.n	80009ea <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80009e0:	2201      	movs	r2, #1
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	409a      	lsls	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d9c3      	bls.n	800097e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2bff      	cmp	r3, #255	; 0xff
 8000a02:	d946      	bls.n	8000a92 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	e03a      	b.n	8000a86 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	3308      	adds	r3, #8
 8000a14:	2201      	movs	r2, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d127      	bne.n	8000a80 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000a36:	220f      	movs	r2, #15
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	4013      	ands	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	78db      	ldrb	r3, [r3, #3]
 8000a5c:	2b28      	cmp	r3, #40	; 0x28
 8000a5e:	d105      	bne.n	8000a6c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	3308      	adds	r3, #8
 8000a64:	2201      	movs	r2, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	78db      	ldrb	r3, [r3, #3]
 8000a70:	2b48      	cmp	r3, #72	; 0x48
 8000a72:	d105      	bne.n	8000a80 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	3308      	adds	r3, #8
 8000a78:	2201      	movs	r2, #1
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d9c1      	bls.n	8000a10 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	605a      	str	r2, [r3, #4]
  }
}
 8000a92:	bf00      	nop
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000aa8:	887a      	ldrh	r2, [r7, #2]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000ac4:	887a      	ldrh	r2, [r7, #2]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	615a      	str	r2, [r3, #20]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000aec:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d007      	beq.n	8000b0c <RCC_GetClocksFreq+0x38>
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d009      	beq.n	8000b14 <RCC_GetClocksFreq+0x40>
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d133      	bne.n	8000b6c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a47      	ldr	r2, [pc, #284]	; (8000c24 <RCC_GetClocksFreq+0x150>)
 8000b08:	601a      	str	r2, [r3, #0]
      break;
 8000b0a:	e033      	b.n	8000b74 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a45      	ldr	r2, [pc, #276]	; (8000c24 <RCC_GetClocksFreq+0x150>)
 8000b10:	601a      	str	r2, [r3, #0]
      break;
 8000b12:	e02f      	b.n	8000b74 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000b14:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b1c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000b1e:	4b40      	ldr	r3, [pc, #256]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b26:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d106      	bne.n	8000b44 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4a3b      	ldr	r2, [pc, #236]	; (8000c28 <RCC_GetClocksFreq+0x154>)
 8000b3a:	fb02 f203 	mul.w	r2, r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000b42:	e017      	b.n	8000b74 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4a35      	ldr	r2, [pc, #212]	; (8000c28 <RCC_GetClocksFreq+0x154>)
 8000b54:	fb02 f203 	mul.w	r2, r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]
      break;
 8000b5c:	e00a      	b.n	8000b74 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <RCC_GetClocksFreq+0x150>)
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
      break;
 8000b6a:	e003      	b.n	8000b74 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	; (8000c24 <RCC_GetClocksFreq+0x150>)
 8000b70:	601a      	str	r2, [r3, #0]
      break;
 8000b72:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b7c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <RCC_GetClocksFreq+0x158>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	4413      	add	r3, r2
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ba4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <RCC_GetClocksFreq+0x158>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	40da      	lsrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bcc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	0adb      	lsrs	r3, r3, #11
 8000bd2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <RCC_GetClocksFreq+0x158>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <RCC_GetClocksFreq+0x14c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	0b9b      	lsrs	r3, r3, #14
 8000bfa:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <RCC_GetClocksFreq+0x15c>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	611a      	str	r2, [r3, #16]
}
 8000c16:	bf00      	nop
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40021000 	.word	0x40021000
 8000c24:	007a1200 	.word	0x007a1200
 8000c28:	003d0900 	.word	0x003d0900
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000010 	.word	0x20000010

08000c34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c46:	4909      	ldr	r1, [pc, #36]	; (8000c6c <RCC_APB2PeriphClockCmd+0x38>)
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <RCC_APB2PeriphClockCmd+0x38>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c52:	e006      	b.n	8000c62 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c54:	4905      	ldr	r1, [pc, #20]	; (8000c6c <RCC_APB2PeriphClockCmd+0x38>)
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <RCC_APB2PeriphClockCmd+0x38>)
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	618b      	str	r3, [r1, #24]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000

08000c70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c82:	4909      	ldr	r1, [pc, #36]	; (8000ca8 <RCC_APB1PeriphClockCmd+0x38>)
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <RCC_APB1PeriphClockCmd+0x38>)
 8000c86:	69da      	ldr	r2, [r3, #28]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000c8e:	e006      	b.n	8000c9e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c90:	4905      	ldr	r1, [pc, #20]	; (8000ca8 <RCC_APB1PeriphClockCmd+0x38>)
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <RCC_APB1PeriphClockCmd+0x38>)
 8000c94:	69da      	ldr	r2, [r3, #28]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61cb      	str	r3, [r1, #28]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000

08000cac <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <TIM_TimeBaseInit+0xd0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <TIM_TimeBaseInit+0x44>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <TIM_TimeBaseInit+0xd4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00f      	beq.n	8000cf0 <TIM_TimeBaseInit+0x44>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd6:	d00b      	beq.n	8000cf0 <TIM_TimeBaseInit+0x44>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <TIM_TimeBaseInit+0xd8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <TIM_TimeBaseInit+0x44>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a29      	ldr	r2, [pc, #164]	; (8000d88 <TIM_TimeBaseInit+0xdc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d003      	beq.n	8000cf0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <TIM_TimeBaseInit+0xe0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d108      	bne.n	8000d02 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cf6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	885a      	ldrh	r2, [r3, #2]
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <TIM_TimeBaseInit+0xe4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00c      	beq.n	8000d24 <TIM_TimeBaseInit+0x78>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <TIM_TimeBaseInit+0xe8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d008      	beq.n	8000d24 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d18:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	88da      	ldrh	r2, [r3, #6]
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	89fa      	ldrh	r2, [r7, #14]
 8000d28:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	889a      	ldrh	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <TIM_TimeBaseInit+0xd0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00f      	beq.n	8000d62 <TIM_TimeBaseInit+0xb6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <TIM_TimeBaseInit+0xd4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00b      	beq.n	8000d62 <TIM_TimeBaseInit+0xb6>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <TIM_TimeBaseInit+0xec>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <TIM_TimeBaseInit+0xb6>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <TIM_TimeBaseInit+0xf0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d003      	beq.n	8000d62 <TIM_TimeBaseInit+0xb6>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <TIM_TimeBaseInit+0xf4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d104      	bne.n	8000d6c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	7a1b      	ldrb	r3, [r3, #8]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	829a      	strh	r2, [r3, #20]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40013400 	.word	0x40013400
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40000800 	.word	0x40000800
 8000d8c:	40000c00 	.word	0x40000c00
 8000d90:	40001000 	.word	0x40001000
 8000d94:	40001400 	.word	0x40001400
 8000d98:	40014000 	.word	0x40014000
 8000d9c:	40014400 	.word	0x40014400
 8000da0:	40014800 	.word	0x40014800

08000da4 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	817b      	strh	r3, [r7, #10]
 8000db2:	2300      	movs	r3, #0
 8000db4:	81fb      	strh	r3, [r7, #14]
 8000db6:	2300      	movs	r3, #0
 8000db8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	8c1b      	ldrh	r3, [r3, #32]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	8c1b      	ldrh	r3, [r3, #32]
 8000dce:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	889b      	ldrh	r3, [r3, #4]
 8000dd4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8b1b      	ldrh	r3, [r3, #24]
 8000dda:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000ddc:	897b      	ldrh	r3, [r7, #10]
 8000dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	881a      	ldrh	r2, [r3, #0]
 8000df0:	897b      	ldrh	r3, [r7, #10]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	891a      	ldrh	r2, [r3, #8]
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	885a      	ldrh	r2, [r3, #2]
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <TIM_OC1Init+0x104>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00f      	beq.n	8000e3a <TIM_OC1Init+0x96>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a23      	ldr	r2, [pc, #140]	; (8000eac <TIM_OC1Init+0x108>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00b      	beq.n	8000e3a <TIM_OC1Init+0x96>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <TIM_OC1Init+0x10c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <TIM_OC1Init+0x96>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <TIM_OC1Init+0x110>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d003      	beq.n	8000e3a <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <TIM_OC1Init+0x114>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d123      	bne.n	8000e82 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	f023 0308 	bic.w	r3, r3, #8
 8000e40:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	895a      	ldrh	r2, [r3, #10]
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	f023 0304 	bic.w	r3, r3, #4
 8000e52:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	889a      	ldrh	r2, [r3, #4]
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e64:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e6c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	899a      	ldrh	r2, [r3, #12]
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	89da      	ldrh	r2, [r3, #14]
 8000e7c:	89bb      	ldrh	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	89ba      	ldrh	r2, [r7, #12]
 8000e86:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	897a      	ldrh	r2, [r7, #10]
 8000e8c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	88da      	ldrh	r2, [r3, #6]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	89fa      	ldrh	r2, [r7, #14]
 8000e9a:	841a      	strh	r2, [r3, #32]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40012c00 	.word	0x40012c00
 8000eac:	40013400 	.word	0x40013400
 8000eb0:	40014000 	.word	0x40014000
 8000eb4:	40014400 	.word	0x40014400
 8000eb8:	40014800 	.word	0x40014800

08000ebc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	8859      	ldrh	r1, [r3, #2]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	889a      	ldrh	r2, [r3, #4]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	891b      	ldrh	r3, [r3, #8]
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f948 	bl	8001170 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	88db      	ldrh	r3, [r3, #6]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f899 	bl	800101e <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000eec:	e036      	b.n	8000f5c <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d10f      	bne.n	8000f16 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	8859      	ldrh	r1, [r3, #2]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	889a      	ldrh	r2, [r3, #4]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	891b      	ldrh	r3, [r3, #8]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f9a4 	bl	8001250 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	88db      	ldrh	r3, [r3, #6]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f8a0 	bl	8001054 <TIM_SetIC2Prescaler>
}
 8000f14:	e022      	b.n	8000f5c <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d10f      	bne.n	8000f3e <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8859      	ldrh	r1, [r3, #2]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	891b      	ldrh	r3, [r3, #8]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 fa0a 	bl	8001344 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	88db      	ldrh	r3, [r3, #6]
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f8a9 	bl	800108e <TIM_SetIC3Prescaler>
}
 8000f3c:	e00e      	b.n	8000f5c <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	8859      	ldrh	r1, [r3, #2]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	889a      	ldrh	r2, [r3, #4]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	891b      	ldrh	r3, [r3, #8]
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fa70 	bl	8001430 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	88db      	ldrh	r3, [r3, #6]
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f8b4 	bl	80010c4 <TIM_SetIC4Prescaler>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000f86:	e007      	b.n	8000f98 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	801a      	strh	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	899b      	ldrh	r3, [r3, #12]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000fc8:	e009      	b.n	8000fde <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	899b      	ldrh	r3, [r3, #12]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	819a      	strh	r2, [r3, #12]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	8b1b      	ldrh	r3, [r3, #24]
 8000ffc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	f023 0308 	bic.w	r3, r3, #8
 8001004:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001006:	89fa      	ldrh	r2, [r7, #14]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4313      	orrs	r3, r2
 800100c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	89fa      	ldrh	r2, [r7, #14]
 8001012:	831a      	strh	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8b1b      	ldrh	r3, [r3, #24]
 800102e:	b29b      	uxth	r3, r3
 8001030:	f023 030c 	bic.w	r3, r3, #12
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	8b1b      	ldrh	r3, [r3, #24]
 800103e:	b29a      	uxth	r2, r3
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4313      	orrs	r3, r2
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	831a      	strh	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8b1b      	ldrh	r3, [r3, #24]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	8b1b      	ldrh	r3, [r3, #24]
 8001074:	b29a      	uxth	r2, r3
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	8b9b      	ldrh	r3, [r3, #28]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f023 030c 	bic.w	r3, r3, #12
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8b9b      	ldrh	r3, [r3, #28]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	839a      	strh	r2, [r3, #28]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	8b9b      	ldrh	r3, [r3, #28]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	8b9b      	ldrh	r3, [r3, #28]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	839a      	strh	r2, [r3, #28]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80010fe:	b480      	push	{r7}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	81bb      	strh	r3, [r7, #12]
 8001112:	2300      	movs	r3, #0
 8001114:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8a1b      	ldrh	r3, [r3, #16]
 800111a:	b29a      	uxth	r2, r3
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	899b      	ldrh	r3, [r3, #12]
 8001126:	b29a      	uxth	r2, r3
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800112e:	89bb      	ldrh	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <TIM_GetITStatus+0x42>
 8001134:	897b      	ldrh	r3, [r7, #10]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e001      	b.n	8001144 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	43db      	mvns	r3, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	821a      	strh	r2, [r3, #16]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	4608      	mov	r0, r1
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4603      	mov	r3, r0
 8001180:	817b      	strh	r3, [r7, #10]
 8001182:	460b      	mov	r3, r1
 8001184:	813b      	strh	r3, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	82bb      	strh	r3, [r7, #20]
 800118e:	2300      	movs	r3, #0
 8001190:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8c1b      	ldrh	r3, [r3, #32]
 8001196:	b29b      	uxth	r3, r3
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8b1b      	ldrh	r3, [r3, #24]
 80011a6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8c1b      	ldrh	r3, [r3, #32]
 80011ac:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80011ae:	8abb      	ldrh	r3, [r7, #20]
 80011b0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80011b4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	893b      	ldrh	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	8abb      	ldrh	r3, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <TI1_Config+0xcc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <TI1_Config+0x88>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <TI1_Config+0xd0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00f      	beq.n	80011f8 <TI1_Config+0x88>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011de:	d00b      	beq.n	80011f8 <TI1_Config+0x88>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <TI1_Config+0xd4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <TI1_Config+0x88>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <TI1_Config+0xd8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d003      	beq.n	80011f8 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <TI1_Config+0xdc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d10b      	bne.n	8001210 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 80011f8:	8afb      	ldrh	r3, [r7, #22]
 80011fa:	f023 0302 	bic.w	r3, r3, #2
 80011fe:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001200:	897a      	ldrh	r2, [r7, #10]
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	4313      	orrs	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	82fb      	strh	r3, [r7, #22]
 800120e:	e00a      	b.n	8001226 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001210:	8afb      	ldrh	r3, [r7, #22]
 8001212:	f023 030a 	bic.w	r3, r3, #10
 8001216:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001218:	897a      	ldrh	r2, [r7, #10]
 800121a:	8afb      	ldrh	r3, [r7, #22]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8aba      	ldrh	r2, [r7, #20]
 800122a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8afa      	ldrh	r2, [r7, #22]
 8001230:	841a      	strh	r2, [r3, #32]
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40013400 	.word	0x40013400
 8001244:	40000400 	.word	0x40000400
 8001248:	40000800 	.word	0x40000800
 800124c:	40000c00 	.word	0x40000c00

08001250 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4603      	mov	r3, r0
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	460b      	mov	r3, r1
 8001264:	813b      	strh	r3, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	82bb      	strh	r3, [r7, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	82fb      	strh	r3, [r7, #22]
 8001272:	2300      	movs	r3, #0
 8001274:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8c1b      	ldrh	r3, [r3, #32]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f023 0310 	bic.w	r3, r3, #16
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8b1b      	ldrh	r3, [r3, #24]
 800128a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8c1b      	ldrh	r3, [r3, #32]
 8001290:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001292:	897b      	ldrh	r3, [r7, #10]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001298:	8abb      	ldrh	r3, [r7, #20]
 800129a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800129e:	051b      	lsls	r3, r3, #20
 80012a0:	0d1b      	lsrs	r3, r3, #20
 80012a2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	8abb      	ldrh	r3, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80012b0:	893b      	ldrh	r3, [r7, #8]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	8abb      	ldrh	r3, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <TI2_Config+0xe0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <TI2_Config+0x9c>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <TI2_Config+0xe4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00f      	beq.n	80012ec <TI2_Config+0x9c>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d2:	d00b      	beq.n	80012ec <TI2_Config+0x9c>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <TI2_Config+0xe8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <TI2_Config+0x9c>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <TI2_Config+0xec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d003      	beq.n	80012ec <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <TI2_Config+0xf0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d10b      	bne.n	8001304 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	f023 0320 	bic.w	r3, r3, #32
 80012f2:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80012f4:	8a7a      	ldrh	r2, [r7, #18]
 80012f6:	8afb      	ldrh	r3, [r7, #22]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	82fb      	strh	r3, [r7, #22]
 8001302:	e00a      	b.n	800131a <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800130a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 800130c:	897a      	ldrh	r2, [r7, #10]
 800130e:	8afb      	ldrh	r3, [r7, #22]
 8001310:	4313      	orrs	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8aba      	ldrh	r2, [r7, #20]
 800131e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8afa      	ldrh	r2, [r7, #22]
 8001324:	841a      	strh	r2, [r3, #32]
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40012c00 	.word	0x40012c00
 8001334:	40013400 	.word	0x40013400
 8001338:	40000400 	.word	0x40000400
 800133c:	40000800 	.word	0x40000800
 8001340:	40000c00 	.word	0x40000c00

08001344 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	82bb      	strh	r3, [r7, #20]
 8001362:	2300      	movs	r3, #0
 8001364:	82fb      	strh	r3, [r7, #22]
 8001366:	2300      	movs	r3, #0
 8001368:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8c1b      	ldrh	r3, [r3, #32]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8b9b      	ldrh	r3, [r3, #28]
 800137e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8c1b      	ldrh	r3, [r3, #32]
 8001384:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001386:	897b      	ldrh	r3, [r7, #10]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800138c:	8abb      	ldrh	r3, [r7, #20]
 800138e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001392:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	b29a      	uxth	r2, r3
 800139a:	893b      	ldrh	r3, [r7, #8]
 800139c:	4313      	orrs	r3, r2
 800139e:	b29a      	uxth	r2, r3
 80013a0:	8abb      	ldrh	r3, [r7, #20]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <TI3_Config+0xd8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <TI3_Config+0x92>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <TI3_Config+0xdc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00f      	beq.n	80013d6 <TI3_Config+0x92>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d00b      	beq.n	80013d6 <TI3_Config+0x92>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <TI3_Config+0xe0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <TI3_Config+0x92>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <TI3_Config+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d003      	beq.n	80013d6 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <TI3_Config+0xe8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10b      	bne.n	80013ee <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 80013d6:	8afb      	ldrh	r3, [r7, #22]
 80013d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013dc:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80013de:	8a7a      	ldrh	r2, [r7, #18]
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	82fb      	strh	r3, [r7, #22]
 80013ec:	e00a      	b.n	8001404 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80013ee:	8afb      	ldrh	r3, [r7, #22]
 80013f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80013f4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 80013f6:	897a      	ldrh	r2, [r7, #10]
 80013f8:	8afb      	ldrh	r3, [r7, #22]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8aba      	ldrh	r2, [r7, #20]
 8001408:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8afa      	ldrh	r2, [r7, #22]
 800140e:	841a      	strh	r2, [r3, #32]
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00
 8001420:	40013400 	.word	0x40013400
 8001424:	40000400 	.word	0x40000400
 8001428:	40000800 	.word	0x40000800
 800142c:	40000c00 	.word	0x40000c00

08001430 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4603      	mov	r3, r0
 8001440:	817b      	strh	r3, [r7, #10]
 8001442:	460b      	mov	r3, r1
 8001444:	813b      	strh	r3, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	82bb      	strh	r3, [r7, #20]
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
 8001452:	2300      	movs	r3, #0
 8001454:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8c1b      	ldrh	r3, [r3, #32]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001460:	b29a      	uxth	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8c1b      	ldrh	r3, [r3, #32]
 8001470:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800147e:	051b      	lsls	r3, r3, #20
 8001480:	0d1b      	lsrs	r3, r3, #20
 8001482:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001484:	893b      	ldrh	r3, [r7, #8]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b29a      	uxth	r2, r3
 800148a:	8abb      	ldrh	r3, [r7, #20]
 800148c:	4313      	orrs	r3, r2
 800148e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	b29a      	uxth	r2, r3
 8001496:	8abb      	ldrh	r3, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <TI4_Config+0xe4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <TI4_Config+0x9c>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <TI4_Config+0xe8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00f      	beq.n	80014cc <TI4_Config+0x9c>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b2:	d00b      	beq.n	80014cc <TI4_Config+0x9c>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <TI4_Config+0xec>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d007      	beq.n	80014cc <TI4_Config+0x9c>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <TI4_Config+0xf0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d003      	beq.n	80014cc <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <TI4_Config+0xf4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10b      	bne.n	80014e4 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014d2:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80014d4:	8a7a      	ldrh	r2, [r7, #18]
 80014d6:	8afb      	ldrh	r3, [r7, #22]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	82fb      	strh	r3, [r7, #22]
 80014e2:	e00c      	b.n	80014fe <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 80014e4:	8afb      	ldrh	r3, [r7, #22]
 80014e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ea:	045b      	lsls	r3, r3, #17
 80014ec:	0c5b      	lsrs	r3, r3, #17
 80014ee:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 80014f0:	897a      	ldrh	r2, [r7, #10]
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fc:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8aba      	ldrh	r2, [r7, #20]
 8001502:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8afa      	ldrh	r2, [r7, #22]
 8001508:	841a      	strh	r2, [r3, #32]
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40012c00 	.word	0x40012c00
 8001518:	40013400 	.word	0x40013400
 800151c:	40000400 	.word	0x40000400
 8001520:	40000800 	.word	0x40000800
 8001524:	40000c00 	.word	0x40000c00

08001528 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8a1b      	ldrh	r3, [r3, #16]
 800154e:	b29b      	uxth	r3, r3
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001554:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001558:	4013      	ands	r3, r2
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	88db      	ldrh	r3, [r3, #6]
 8001560:	461a      	mov	r2, r3
 8001562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001564:	4313      	orrs	r3, r2
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	899b      	ldrh	r3, [r3, #12]
 8001574:	b29b      	uxth	r3, r3
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800157a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800157e:	4013      	ands	r3, r2
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	889a      	ldrh	r2, [r3, #4]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	891b      	ldrh	r3, [r3, #8]
 800158a:	4313      	orrs	r3, r2
 800158c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001592:	4313      	orrs	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	4313      	orrs	r3, r2
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8a9b      	ldrh	r3, [r3, #20]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80015ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80015b4:	4013      	ands	r3, r2
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	899b      	ldrh	r3, [r3, #12]
 80015bc:	461a      	mov	r2, r3
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	4313      	orrs	r3, r2
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fa7f 	bl	8000ad4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <USART_Init+0x16c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d102      	bne.n	80015e4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	e001      	b.n	80015e8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	899b      	ldrh	r3, [r3, #12]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da0c      	bge.n	800160e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009a      	lsls	r2, r3, #2
 80015fe:	441a      	add	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	e00b      	b.n	8001626 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800160e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009a      	lsls	r2, r3, #2
 8001618:	441a      	add	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <USART_Init+0x170>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	2264      	movs	r2, #100	; 0x64
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	899b      	ldrh	r3, [r3, #12]
 8001648:	b29b      	uxth	r3, r3
 800164a:	b21b      	sxth	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	da0c      	bge.n	800166a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	3332      	adds	r3, #50	; 0x32
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <USART_Init+0x170>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	4313      	orrs	r3, r2
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	e00b      	b.n	8001682 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	3332      	adds	r3, #50	; 0x32
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <USART_Init+0x170>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167e:	4313      	orrs	r3, r2
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	811a      	strh	r2, [r3, #8]
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800
 8001698:	51eb851f 	.word	0x51eb851f

0800169c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	899b      	ldrh	r3, [r3, #12]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80016be:	e007      	b.n	80016d0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	899b      	ldrh	r3, [r3, #12]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	819a      	strh	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001710:	2201      	movs	r2, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	330c      	adds	r3, #12
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d103      	bne.n	8001736 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3310      	adds	r3, #16
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e002      	b.n	800173c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3314      	adds	r3, #20
 800173a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800174e:	e006      	b.n	800175e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	43d2      	mvns	r2, r2
 800175a:	400a      	ands	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	809a      	strh	r2, [r3, #4]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179c:	b29b      	uxth	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	4013      	ands	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800180c:	2201      	movs	r2, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	899b      	ldrh	r3, [r3, #12]
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4013      	ands	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e011      	b.n	8001850 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8a1b      	ldrh	r3, [r3, #16]
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e006      	b.n	8001850 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8a9b      	ldrh	r3, [r3, #20]
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001858:	2201      	movs	r2, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <USART_GetITStatus+0xa4>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800187c:	2301      	movs	r3, #1
 800187e:	74fb      	strb	r3, [r7, #19]
 8001880:	e001      	b.n	8001886 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001886:	7cfb      	ldrb	r3, [r7, #19]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	81fb      	strh	r3, [r7, #14]
 80018a2:	2300      	movs	r3, #0
 80018a4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	2201      	movs	r2, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	801a      	strh	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
	...

080018cc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <NVIC_EnableIRQ+0x2c>)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100

080018fc <USART1_PC_Init>:

#include "uart.h"


void USART1_PC_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART1_InitStruct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef GPIO_USART1_InitStruct;

    /* Enable clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8001902:	2101      	movs	r1, #1
 8001904:	f244 0005 	movw	r0, #16389	; 0x4005
 8001908:	f7ff f994 	bl	8000c34 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    GPIO_USART1_InitStruct.GPIO_Pin = GPIO_Pin_9;
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	80bb      	strh	r3, [r7, #4]
    GPIO_USART1_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001912:	2303      	movs	r3, #3
 8001914:	71bb      	strb	r3, [r7, #6]
    GPIO_USART1_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8001916:	2318      	movs	r3, #24
 8001918:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_USART1_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <USART1_PC_Init+0x88>)
 8001920:	f7ff f800 	bl	8000924 <GPIO_Init>
    /* GPIOA PIN10 alternative function Rx */
    GPIO_USART1_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8001924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001928:	80bb      	strh	r3, [r7, #4]
    GPIO_USART1_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800192a:	2303      	movs	r3, #3
 800192c:	71bb      	strb	r3, [r7, #6]
    GPIO_USART1_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800192e:	2304      	movs	r3, #4
 8001930:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_USART1_InitStruct);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <USART1_PC_Init+0x88>)
 8001938:	f7fe fff4 	bl	8000924 <GPIO_Init>

    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    USART1_InitStruct.USART_BaudRate = 115200;
 800193c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001940:	60bb      	str	r3, [r7, #8]
    USART1_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001942:	2300      	movs	r3, #0
 8001944:	81bb      	strh	r3, [r7, #12]
    USART1_InitStruct.USART_StopBits = USART_StopBits_1;
 8001946:	2300      	movs	r3, #0
 8001948:	81fb      	strh	r3, [r7, #14]
    USART1_InitStruct.USART_Parity = USART_Parity_No ;
 800194a:	2300      	movs	r3, #0
 800194c:	823b      	strh	r3, [r7, #16]
    USART1_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800194e:	230c      	movs	r3, #12
 8001950:	827b      	strh	r3, [r7, #18]
    USART1_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001952:	2300      	movs	r3, #0
 8001954:	82bb      	strh	r3, [r7, #20]

    /* Configure USART1 */
    USART_Init(USART1, &USART1_InitStruct);
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	480a      	ldr	r0, [pc, #40]	; (8001988 <USART1_PC_Init+0x8c>)
 800195e:	f7ff fde3 	bl	8001528 <USART_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8001962:	2101      	movs	r1, #1
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <USART1_PC_Init+0x8c>)
 8001966:	f7ff fe99 	bl	800169c <USART_Cmd>

    /* Enable RXNE interrupt */
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800196a:	2201      	movs	r2, #1
 800196c:	f240 5125 	movw	r1, #1317	; 0x525
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <USART1_PC_Init+0x8c>)
 8001972:	f7ff feb2 	bl	80016da <USART_ITConfig>
    /* Enable USART1 global interrupt */
    NVIC_EnableIRQ(USART1_IRQn);
 8001976:	2025      	movs	r0, #37	; 0x25
 8001978:	f7ff ffa8 	bl	80018cc <NVIC_EnableIRQ>


}
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40010800 	.word	0x40010800
 8001988:	40013800 	.word	0x40013800

0800198c <USART_PutChar>:


void USART_PutChar(char c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    // Wait until transmit data register is empty
    while (!USART_GetFlagStatus(USART1, USART_FLAG_TXE));
 8001996:	bf00      	nop
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <USART_PutChar+0x30>)
 800199c:	f7ff ff04 	bl	80017a8 <USART_GetFlagStatus>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f8      	beq.n	8001998 <USART_PutChar+0xc>
    // Send a char using USART1
    USART_SendData(USART1, c);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <USART_PutChar+0x30>)
 80019ae:	f7ff fedb 	bl	8001768 <USART_SendData>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40013800 	.word	0x40013800

080019c0 <USART_GetChar>:
    }
}


uint16_t USART_GetChar(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    // Wait until data is received
    while (!USART_GetFlagStatus(USART1, USART_FLAG_RXNE));
 80019c4:	bf00      	nop
 80019c6:	2120      	movs	r1, #32
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <USART_GetChar+0x20>)
 80019ca:	f7ff feed 	bl	80017a8 <USART_GetFlagStatus>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f8      	beq.n	80019c6 <USART_GetChar+0x6>
    // Read received char
    return USART_ReceiveData(USART1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART_GetChar+0x20>)
 80019d6:	f7ff fed8 	bl	800178a <USART_ReceiveData>
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013800 	.word	0x40013800

080019e4 <USART_SendUInt_32>:
	c = (num >> 8) & 0xFF;
	USART_PutChar(c);
}

void USART_SendUInt_32(uint32_t num)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	char c;

	c = num & 0xFF;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
	USART_PutChar(c);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffca 	bl	800198c <USART_PutChar>

	c = (num >> 8) & 0xFF;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	73fb      	strb	r3, [r7, #15]
	USART_PutChar(c);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ffc3 	bl	800198c <USART_PutChar>

	c = (num >> 16) & 0xFF;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	73fb      	strb	r3, [r7, #15]
	USART_PutChar(c);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffbc 	bl	800198c <USART_PutChar>

	c = (num >> 24) & 0xFF;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0e1b      	lsrs	r3, r3, #24
 8001a18:	73fb      	strb	r3, [r7, #15]
	USART_PutChar(c);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffb5 	bl	800198c <USART_PutChar>




}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <NVIC_EnableIRQ>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <NVIC_EnableIRQ+0x2c>)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	095b      	lsrs	r3, r3, #5
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	da0b      	bge.n	8001a88 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001a70:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <NVIC_SetPriority+0x4c>)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	3b04      	subs	r3, #4
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001a86:	e009      	b.n	8001a9c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001a88:	4908      	ldr	r1, [pc, #32]	; (8001aac <NVIC_SetPriority+0x50>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abe:	d301      	bcc.n	8001ac4 <SysTick_Config+0x14>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e011      	b.n	8001ae8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001acc:	3b01      	subs	r3, #1
 8001ace:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad6:	f7ff ffc1 	bl	8001a5c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <SysTick_Config+0x40>)
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <Systick_init>:
const uint16_t PWM_period = 14400;
static uint32_t startTime = 0;
extern volatile int noMs;

void Systick_init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	//interrupt every ms
	// RELOAD = (1 ms x 72 MHz) - 1 = 71999 ticks
	SysTick_Config(71999);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <Systick_init+0x10>)
 8001afa:	f7ff ffd9 	bl	8001ab0 <SysTick_Config>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	0001193f 	.word	0x0001193f

08001b08 <BlueLED_setup>:
	startTime = noMs;
	while( (noMs - startTime) < delayMs){}
}

void BlueLED_setup(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure_LED;					//inicijalizacijska struktura za LED
	GPIO_InitTypeDef GPIO_InitStructure_L298N;					//inicijalizacijska struktura za IN1 i IN2

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);  		//uključivanje takta za port C
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2010      	movs	r0, #16
 8001b12:	f7ff f88f 	bl	8000c34 <RCC_APB2PeriphClockCmd>

	//plava LED na PD16
	GPIO_InitStructure_LED.GPIO_Pin = GPIO_Pin_13;
 8001b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure_LED.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure_LED.GPIO_Speed = GPIO_Speed_2MHz;
 8001b20:	2302      	movs	r3, #2
 8001b22:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure_LED);
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <BlueLED_setup+0x6c>)
 8001b2a:	f7fe fefb 	bl	8000924 <GPIO_Init>

	GPIO_SetBits(GPIOC,GPIO_Pin_13); //LED turn off
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <BlueLED_setup+0x6c>)
 8001b34:	f7fe ffb2 	bl	8000a9c <GPIO_SetBits>


	//L298N IN1 IN2
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);  		//uključivanje takta za port B
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2008      	movs	r0, #8
 8001b3c:	f7ff f87a 	bl	8000c34 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure_L298N.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_10;
 8001b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b44:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure_L298N.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b46:	2310      	movs	r3, #16
 8001b48:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure_L298N.GPIO_Speed = GPIO_Speed_2MHz;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure_L298N);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <BlueLED_setup+0x70>)
 8001b54:	f7fe fee6 	bl	8000924 <GPIO_Init>

	//motor forward
	GPIO_SetBits(GPIOB,GPIO_Pin_11);
 8001b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <BlueLED_setup+0x70>)
 8001b5e:	f7fe ff9d 	bl	8000a9c <GPIO_SetBits>
	GPIO_ResetBits(GPIOB,GPIO_Pin_10);
 8001b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <BlueLED_setup+0x70>)
 8001b68:	f7fe ffa6 	bl	8000ab8 <GPIO_ResetBits>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	00000000 	.word	0x00000000

08001b80 <Timer_setup>:

void Timer_setup(void)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b091      	sub	sp, #68	; 0x44
 8001b84:	af00      	add	r7, sp, #0
	 * UE [s] = ((PSC+1)*(TIM9_ARR+1))/fCK_PSC[Hz]
	 *
	 */

	/* TIM4 - za periodicke taskove */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2004      	movs	r0, #4
 8001b8a:	f7ff f871 	bl	8000c70 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TIM4_InitStructure;
	TIM4_InitStructure.TIM_Prescaler = 5999; //vrijednost dijelitelja frekvencije
 8001b8e:	f241 736f 	movw	r3, #5999	; 0x176f
 8001b92:	86bb      	strh	r3, [r7, #52]	; 0x34
	TIM4_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001b94:	2300      	movs	r3, #0
 8001b96:	86fb      	strh	r3, [r7, #54]	; 0x36
	TIM4_InitStructure.TIM_Period = 1199; //vrijednost auto-reload registra - definira Ts
 8001b98:	f240 43af 	movw	r3, #1199	; 0x4af
 8001b9c:	873b      	strh	r3, [r7, #56]	; 0x38
	TIM4_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	877b      	strh	r3, [r7, #58]	; 0x3a
	TIM_TimeBaseInit(TIM4, &TIM4_InitStructure);
 8001ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	484d      	ldr	r0, [pc, #308]	; (8001ce0 <Timer_setup+0x160>)
 8001baa:	f7ff f87f 	bl	8000cac <TIM_TimeBaseInit>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	484b      	ldr	r0, [pc, #300]	; (8001ce0 <Timer_setup+0x160>)
 8001bb4:	f7ff f9f5 	bl	8000fa2 <TIM_ITConfig>
	TIM_Cmd(TIM4, ENABLE);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4849      	ldr	r0, [pc, #292]	; (8001ce0 <Timer_setup+0x160>)
 8001bbc:	f7ff f9d2 	bl	8000f64 <TIM_Cmd>

	//omogući TIM4 prekid
	NVIC_EnableIRQ(TIM4_IRQn);
 8001bc0:	201e      	movs	r0, #30
 8001bc2:	f7ff ff33 	bl	8001a2c <NVIC_EnableIRQ>
	 * PB0 - CH3
	 * PB1 - CH4
	 *
	*/

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f851 	bl	8000c70 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 8001bce:	2101      	movs	r1, #1
 8001bd0:	200d      	movs	r0, #13
 8001bd2:	f7ff f82f 	bl	8000c34 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructPWM;

	GPIO_InitStructPWM.GPIO_Pin = GPIO_Pin_6;
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	863b      	strh	r3, [r7, #48]	; 0x30
	GPIO_InitStructPWM.GPIO_Mode = GPIO_Mode_AF_PP;
 8001bda:	2318      	movs	r3, #24
 8001bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	GPIO_InitStructPWM.GPIO_Speed = GPIO_Speed_50MHz;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bea:	4619      	mov	r1, r3
 8001bec:	483d      	ldr	r0, [pc, #244]	; (8001ce4 <Timer_setup+0x164>)
 8001bee:	f7fe fe99 	bl	8000924 <GPIO_Init>

	//PWM frequency 5KHz
	TIM_TimeBaseInitTypeDef TIM3_InitStructure;
	TIM3_InitStructure.TIM_Prescaler = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM3_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
	TIM3_InitStructure.TIM_Period = PWM_period-1;
 8001bfa:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	853b      	strh	r3, [r7, #40]	; 0x28
	TIM3_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	857b      	strh	r3, [r7, #42]	; 0x2a
	TIM_TimeBaseInit(TIM3, &TIM3_InitStructure);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4836      	ldr	r0, [pc, #216]	; (8001ce8 <Timer_setup+0x168>)
 8001c10:	f7ff f84c 	bl	8000cac <TIM_TimeBaseInit>

	TIM_Cmd(TIM3, ENABLE);
 8001c14:	2101      	movs	r1, #1
 8001c16:	4834      	ldr	r0, [pc, #208]	; (8001ce8 <Timer_setup+0x168>)
 8001c18:	f7ff f9a4 	bl	8000f64 <TIM_Cmd>

	//PWM on CH1
	TIM_OCInitTypeDef TIM3_OCInitStruct;
	TIM3_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	82bb      	strh	r3, [r7, #20]
	TIM3_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8001c20:	2301      	movs	r3, #1
 8001c22:	82fb      	strh	r3, [r7, #22]
	TIM3_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8001c24:	2300      	movs	r3, #0
 8001c26:	83bb      	strh	r3, [r7, #28]
	TIM3_OCInitStruct.TIM_Pulse = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	837b      	strh	r3, [r7, #26]
	TIM_OC1Init(TIM3, &TIM3_OCInitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	482d      	ldr	r0, [pc, #180]	; (8001ce8 <Timer_setup+0x168>)
 8001c34:	f7ff f8b6 	bl	8000da4 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8001c38:	2108      	movs	r1, #8
 8001c3a:	482b      	ldr	r0, [pc, #172]	; (8001ce8 <Timer_setup+0x168>)
 8001c3c:	f7ff f9d4 	bl	8000fe8 <TIM_OC1PreloadConfig>
	TIM3->CCR1 = (uint16_t)(PWM_period*0.85);
 8001c40:	4c29      	ldr	r4, [pc, #164]	; (8001ce8 <Timer_setup+0x168>)
 8001c42:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fbd4 	bl	80003f4 <__aeabi_i2d>
 8001c4c:	a322      	add	r3, pc, #136	; (adr r3, 8001cd8 <Timer_setup+0x158>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fc35 	bl	80004c0 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe fe41 	bl	80008e4 <__aeabi_d2uiz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	86a3      	strh	r3, [r4, #52]	; 0x34
	 * PA2 - CH3 (speed 2)
	 * */

	GPIO_InitTypeDef GPIO_InitStructInputCapture;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff f800 	bl	8000c70 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE) ;
 8001c70:	2101      	movs	r1, #1
 8001c72:	2004      	movs	r0, #4
 8001c74:	f7fe ffde 	bl	8000c34 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructInputCapture.GPIO_Pin =  GPIO_Pin_3;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	823b      	strh	r3, [r7, #16]
	GPIO_InitStructInputCapture.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStructInputCapture.GPIO_Speed = GPIO_Speed_50MHz;
 8001c80:	2303      	movs	r3, #3
 8001c82:	74bb      	strb	r3, [r7, #18]
    GPIO_Init(GPIOA, &GPIO_InitStructInputCapture) ;
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <Timer_setup+0x164>)
 8001c8c:	f7fe fe4a 	bl	8000924 <GPIO_Init>

    TIM_ICInitTypeDef TIM2_ICInitStruct;

    TIM2_ICInitStruct.TIM_Channel = TIM_Channel_4;
 8001c90:	230c      	movs	r3, #12
 8001c92:	80bb      	strh	r3, [r7, #4]
    TIM2_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001c94:	2300      	movs	r3, #0
 8001c96:	80fb      	strh	r3, [r7, #6]
    TIM2_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	813b      	strh	r3, [r7, #8]
    TIM2_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	817b      	strh	r3, [r7, #10]
    TIM2_ICInitStruct.TIM_ICFilter = 0xFF;
 8001ca0:	23ff      	movs	r3, #255	; 0xff
 8001ca2:	81bb      	strh	r3, [r7, #12]

    TIM_ICInit(TIM2, &TIM2_ICInitStruct);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cac:	f7ff f906 	bl	8000ebc <TIM_ICInit>
    TIM_Cmd(TIM2, ENABLE) ;
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cb6:	f7ff f955 	bl	8000f64 <TIM_Cmd>

    TIM_ITConfig(TIM2, TIM_IT_CC4, ENABLE);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cc2:	f7ff f96e 	bl	8000fa2 <TIM_ITConfig>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001cc6:	201c      	movs	r0, #28
 8001cc8:	f7ff feb0 	bl	8001a2c <NVIC_EnableIRQ>


}
 8001ccc:	bf00      	nop
 8001cce:	3744      	adds	r7, #68	; 0x44
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	33333333 	.word	0x33333333
 8001cdc:	3feb3333 	.word	0x3feb3333
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40000400 	.word	0x40000400

08001cec <Get_PWM>:
	else
		return -1;
}

uint16_t Get_PWM(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	return TIM3->CCR1;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <Get_PWM+0x14>)
 8001cf2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001cf4:	b29b      	uxth	r3, r3
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40000400 	.word	0x40000400

08001d04 <Set_PWM>:

void Set_PWM(uint16_t PWM_val)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	if(PWM_val <= PWM_period)
 8001d0e:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d802      	bhi.n	8001d1e <Set_PWM+0x1a>
		if(PWM_val >= 0)
			TIM3->CCR1 = PWM_val;
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <Set_PWM+0x24>)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	8693      	strh	r3, [r2, #52]	; 0x34
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40000400 	.word	0x40000400

08001d2c <USART1_IRQHandler>:

/* interrupt handlers */

//UART receive interrupt handler
void USART1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART1,USART_IT_RXNE))
 8001d30:	f240 5125 	movw	r1, #1317	; 0x525
 8001d34:	482c      	ldr	r0, [pc, #176]	; (8001de8 <USART1_IRQHandler+0xbc>)
 8001d36:	f7ff fd52 	bl	80017de <USART_GetITStatus>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d051      	beq.n	8001de4 <USART1_IRQHandler+0xb8>
	{
		//echo charachter
		receivedChar = USART_GetChar();
 8001d40:	f7ff fe3e 	bl	80019c0 <USART_GetChar>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <USART1_IRQHandler+0xc0>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		if(receivedChar == 'u')
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <USART1_IRQHandler+0xc0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b75      	cmp	r3, #117	; 0x75
 8001d54:	d11b      	bne.n	8001d8e <USART1_IRQHandler+0x62>
		{
			currentPWM = Get_PWM();
 8001d56:	f7ff ffc9 	bl	8001cec <Get_PWM>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001d60:	801a      	strh	r2, [r3, #0]
			currentPWM += (uint16_t)500;
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001d70:	801a      	strh	r2, [r3, #0]
			if(currentPWM < PWM_period)
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <USART1_IRQHandler+0xc8>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d226      	bcs.n	8001dce <USART1_IRQHandler+0xa2>
				Set_PWM(currentPWM);
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffbc 	bl	8001d04 <Set_PWM>
 8001d8c:	e01f      	b.n	8001dce <USART1_IRQHandler+0xa2>
		}
		else if(receivedChar == 'd')
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <USART1_IRQHandler+0xc0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d11a      	bne.n	8001dce <USART1_IRQHandler+0xa2>
		{

			currentPWM = Get_PWM();
 8001d98:	f7ff ffa8 	bl	8001cec <Get_PWM>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001da2:	801a      	strh	r2, [r3, #0]
			if(currentPWM > 7000u)
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d90d      	bls.n	8001dce <USART1_IRQHandler+0xa2>
			{
				currentPWM -= (uint16_t)500;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001dc0:	801a      	strh	r2, [r3, #0]
				Set_PWM(currentPWM);
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <USART1_IRQHandler+0xc4>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff9b 	bl	8001d04 <Set_PWM>
			}
		}

		USART_PutChar(receivedChar);
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <USART1_IRQHandler+0xc0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fdd9 	bl	800198c <USART_PutChar>
		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8001dda:	f240 5125 	movw	r1, #1317	; 0x525
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART1_IRQHandler+0xbc>)
 8001de0:	f7ff fd57 	bl	8001892 <USART_ClearITPendingBit>
	}
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	20000050 	.word	0x20000050
 8001df0:	20000040 	.word	0x20000040
 8001df4:	08002140 	.word	0x08002140

08001df8 <TIM2_IRQHandler>:

// TIM2 input capture interrupt
void TIM2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2, TIM_IT_CC4))
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e02:	f7ff f97c 	bl	80010fe <TIM_GetITStatus>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01a      	beq.n	8001e42 <TIM2_IRQHandler+0x4a>
	{
		end_time = TIM2->CCR4;
 8001e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <TIM2_IRQHandler+0x50>)
 8001e1a:	601a      	str	r2, [r3, #0]
		pulse_ticks = end_time - start_time;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <TIM2_IRQHandler+0x50>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <TIM2_IRQHandler+0x54>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <TIM2_IRQHandler+0x58>)
 8001e2e:	801a      	strh	r2, [r3, #0]
        start_time = end_time;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <TIM2_IRQHandler+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <TIM2_IRQHandler+0x54>)
 8001e36:	6013      	str	r3, [r2, #0]
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC4);
 8001e38:	2110      	movs	r1, #16
 8001e3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3e:	f7ff f987 	bl	8001150 <TIM_ClearITPendingBit>
	}

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000003c 	.word	0x2000003c
 8001e4c:	20000038 	.word	0x20000038
 8001e50:	20000034 	.word	0x20000034

08001e54 <TIM4_IRQHandler>:

//TIMER4 every 0.1 second interrupt
void TIM4_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM4, TIM_IT_Update))
 8001e58:	2101      	movs	r1, #1
 8001e5a:	480b      	ldr	r0, [pc, #44]	; (8001e88 <TIM4_IRQHandler+0x34>)
 8001e5c:	f7ff f94f 	bl	80010fe <TIM_GetITStatus>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00e      	beq.n	8001e84 <TIM4_IRQHandler+0x30>
	{
		USART_PutChar('p');
 8001e66:	2070      	movs	r0, #112	; 0x70
 8001e68:	f7ff fd90 	bl	800198c <USART_PutChar>
		USART_PutChar('m');
 8001e6c:	206d      	movs	r0, #109	; 0x6d
 8001e6e:	f7ff fd8d 	bl	800198c <USART_PutChar>
		USART_SendUInt_32(pulse_ticks);
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <TIM4_IRQHandler+0x38>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fdb4 	bl	80019e4 <USART_SendUInt_32>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM4_IRQHandler+0x34>)
 8001e80:	f7ff f966 	bl	8001150 <TIM_ClearITPendingBit>
	}
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	20000034 	.word	0x20000034

08001e90 <SysTick_Handler>:

//for periodic tasks
void SysTick_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	noMs++;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Handler+0x18>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <SysTick_Handler+0x18>)
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000030 	.word	0x20000030

08001eac <main>:


/* main program */

int main(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	Systick_init();
 8001eb0:	f7ff fe20 	bl	8001af4 <Systick_init>
	BlueLED_setup();
 8001eb4:	f7ff fe28 	bl	8001b08 <BlueLED_setup>
	USART1_PC_Init();
 8001eb8:	f7ff fd20 	bl	80018fc <USART1_PC_Init>

	Timer_setup();
 8001ebc:	f7ff fe60 	bl	8001b80 <Timer_setup>
	GPIO_ResetBits(GPIOC,GPIO_Pin_13);
 8001ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <main+0x20>)
 8001ec6:	f7fe fdf7 	bl	8000ab8 <GPIO_ResetBits>
	while (1)
 8001eca:	e7fe      	b.n	8001eca <main+0x1e>
 8001ecc:	40011000 	.word	0x40011000

08001ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ed6:	e003      	b.n	8001ee0 <LoopCopyDataInit>

08001ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ede:	3104      	adds	r1, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ee8:	d3f6      	bcc.n	8001ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001eec:	e002      	b.n	8001ef4 <LoopFillZerobss>

08001eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ef0:	f842 3b04 	str.w	r3, [r2], #4

08001ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ef8:	d3f9      	bcc.n	8001eee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efa:	f000 f837 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f000 f8ef 	bl	80020e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f02:	f7ff ffd3 	bl	8001eac <main>
	bx	lr
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f08:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001f0c:	0800214c 	.word	0x0800214c
	ldr	r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f14:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001f18:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001f1c:	20000054 	.word	0x20000054

08001f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_2_IRQHandler>

08001f22 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
	...

08001f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <SystemInit+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <SystemInit+0x5c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001f7c:	4912      	ldr	r1, [pc, #72]	; (8001fc8 <SystemInit+0x5c>)
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <SystemInit+0x5c>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <SystemInit+0x60>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f88:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <SystemInit+0x5c>)
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <SystemInit+0x5c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <SystemInit+0x5c>)
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <SystemInit+0x5c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <SystemInit+0x5c>)
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <SystemInit+0x5c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SystemInit+0x5c>)
 8001fb2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fb6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001fb8:	f000 f80c 	bl	8001fd4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SystemInit+0x64>)
 8001fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	f8ff0000 	.word	0xf8ff0000
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001fd8:	f000 f802 	bl	8001fe0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001fee:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <SetSysClockTo72+0xf8>)
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <SetSysClockTo72+0xf8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <SetSysClockTo72+0xf8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d103      	bne.n	8002018 <SetSysClockTo72+0x38>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002016:	d1f0      	bne.n	8001ffa <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <SetSysClockTo72+0xf8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002024:	2301      	movs	r3, #1
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	e001      	b.n	800202e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d14b      	bne.n	80020cc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <SetSysClockTo72+0xfc>)
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <SetSysClockTo72+0xfc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <SetSysClockTo72+0xfc>)
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <SetSysClockTo72+0xfc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <SetSysClockTo72+0xfc>)
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <SetSysClockTo72+0xfc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <SetSysClockTo72+0xf8>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <SetSysClockTo72+0xf8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <SetSysClockTo72+0xf8>)
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <SetSysClockTo72+0xf8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002072:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800207e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800208a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <SetSysClockTo72+0xf8>)
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <SetSysClockTo72+0xf8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002098:	bf00      	nop
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <SetSysClockTo72+0xf8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f9      	beq.n	800209a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <SetSysClockTo72+0xf8>)
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <SetSysClockTo72+0xf8>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 0303 	bic.w	r3, r3, #3
 80020b0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <SetSysClockTo72+0xf8>)
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <SetSysClockTo72+0xf8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80020be:	bf00      	nop
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SetSysClockTo72+0xf8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d1f9      	bne.n	80020c0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40022000 	.word	0x40022000

080020e0 <__libc_init_array>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	2500      	movs	r5, #0
 80020e4:	4e0c      	ldr	r6, [pc, #48]	; (8002118 <__libc_init_array+0x38>)
 80020e6:	4c0d      	ldr	r4, [pc, #52]	; (800211c <__libc_init_array+0x3c>)
 80020e8:	1ba4      	subs	r4, r4, r6
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	42a5      	cmp	r5, r4
 80020ee:	d109      	bne.n	8002104 <__libc_init_array+0x24>
 80020f0:	f000 f81a 	bl	8002128 <_init>
 80020f4:	2500      	movs	r5, #0
 80020f6:	4e0a      	ldr	r6, [pc, #40]	; (8002120 <__libc_init_array+0x40>)
 80020f8:	4c0a      	ldr	r4, [pc, #40]	; (8002124 <__libc_init_array+0x44>)
 80020fa:	1ba4      	subs	r4, r4, r6
 80020fc:	10a4      	asrs	r4, r4, #2
 80020fe:	42a5      	cmp	r5, r4
 8002100:	d105      	bne.n	800210e <__libc_init_array+0x2e>
 8002102:	bd70      	pop	{r4, r5, r6, pc}
 8002104:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002108:	4798      	blx	r3
 800210a:	3501      	adds	r5, #1
 800210c:	e7ee      	b.n	80020ec <__libc_init_array+0xc>
 800210e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002112:	4798      	blx	r3
 8002114:	3501      	adds	r5, #1
 8002116:	e7f2      	b.n	80020fe <__libc_init_array+0x1e>
 8002118:	08002144 	.word	0x08002144
 800211c:	08002144 	.word	0x08002144
 8002120:	08002144 	.word	0x08002144
 8002124:	08002148 	.word	0x08002148

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
